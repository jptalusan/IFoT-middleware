#docker-compose.yml
version: '3'

#Note: Not sure if I need to change
#something with the image/build
#Dockerfile contains online docker image, but image in docker-compose
#is named as the local registry docker image. If they are both named
#as local registry docker image, i think i encounter some problem
#regarding allocation? Or is it because i failed to use build/context, dockerfile params.

services:
  frontend:
    image: nuc1:5000/nuc-ifot-frontend
    #image: ifot/frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    expose:
      - "5001"
    command: python manage.py run -h 0.0.0.0 -p 5001
    volumes:
      - /home/jp-nuc/jane/IFoT-middleware/frontend:/usr/src/app
      #- ./frontend:/usr/src/app
    deploy:
      placement:
        constraints:
          - node.role == manager
      # restart_policy:
      #   condition: any
      #   delay: 5s
      #   window: 10s
      #   max_attempts: 5
    environment:
      - FLASK_DEBUG=1
      - APP_SETTINGS=project.server.config.DevelopmentConfig
      - WTF_CSRF_ENABLED = False
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis

  #Backend simply just running redis rq worker
  #needs task files to be deployed in all workers
  backend1:
    image: nuc1:5000/nuc-ifot-worker
    #image: ifot/backend
    build:
      context: ./backend1
      dockerfile: Dockerfile
    ports:
      - "5008:5008"
    #command: rq worker -u redis://redis:6379
    command: python3 worker.py
    volumes:
      - ./backend1:/usr/src/app
    #restart: always
    depends_on:
      - redis
    deploy:
      placement:
        constraints:
          - node.role == worker
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
    environment:
      - PYTHONUNBUFFERED=1

  backend2:
    image: nuc1:5000/nuc-ifot-worker
    #image: ifot/backend
    build:
      context: ./backend2
      dockerfile: Dockerfile
    ports:
      - "5009:5009"
    #command: rq worker -u redis://redis:6379
    command: python3 worker.py
    volumes:
      - ./backend2:/usr/src/app
    #restart: always
    depends_on:
      - redis
    deploy:
      placement:
        constraints:
          - node.role == worker
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
    environment:
      - PYTHONUNBUFFERED=1

  backend3:
    image: nuc1:5000/nuc-ifot-worker
    #image: ifot/backend
    build:
      context: ./backend3
      dockerfile: Dockerfile
    ports:
      - "5010:5010"
    #command: rq worker -u redis://redis:6379
    command: python3 worker.py
    volumes:
      - ./backend3:/usr/src/app
    #restart: always
    depends_on:
      - redis
    deploy:
      placement:
        constraints:
          - node.role == worker
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
    environment:
      - PYTHONUNBUFFERED=1

  aggregator:
    image: nuc1:5000/nuc-ifot-worker
    ports:
      - "5003:5003"
    command: python3 worker.py
    volumes:
      - ./aggregator:/usr/src/app
    depends_on:
      - redis
    deploy:
      placement:
        constraints:
          - node.role == manager

  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    restart: always
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
    logging:
      driver: "none"
    # command: ["redis-server", "--appendonly", "yes"]
    # hostname: redis

  redis_dashboard:
    build: ./redis_dashboard
    #image: ifot/r_dashboard
    image: nuc1:5000/nuc-ifot-dashboard
    container_name: redis_dashboard
    ports:
      - "9181:9181"
    command: rq-dashboard -H redis

  viz:
    image: dockersamples/visualizer
    ports:
      - "8080:8080"
    deploy:
      placement:
        constraints:
          - node.role == manager
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

networks:
  bridge:
    external:
      name: mynet
